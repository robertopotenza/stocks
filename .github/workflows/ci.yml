name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 100 characters.
        # Ignore F824 (unused global) as it's a false positive for dict modifications
        flake8 . --count --exit-zero --ignore=F824 --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Smoke test imports
      run: |
        echo "Testing import of main modules..."
        python -c "import main; print('✓ main.py imports successfully')"
        python -c "import web_server; print('✓ web_server.py imports successfully')"
        python -c "import wsgi; print('✓ wsgi.py imports successfully')"
        python -c "import stock_prices; print('✓ stock_prices.py imports successfully')"
        python -c "import technical_analysis; print('✓ technical_analysis.py imports successfully')"
        echo "All imports successful!"

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t stocks-app .
        echo "✓ Docker image built successfully"
    
    - name: Test Docker container startup
      run: |
        echo "Testing Docker container startup..."
        # Test that the container can start without errors
        timeout 30s docker run --rm -e WEB_MODE=true -e PORT=5000 stocks-app || exit_code=$?
        if [ ${exit_code:-0} -eq 124 ]; then
          echo "✓ Container started successfully (timed out as expected)"
        elif [ ${exit_code:-0} -eq 0 ]; then
          echo "✓ Container ran successfully"
        else
          echo "✗ Container failed to start properly"
          exit 1
        fi